// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FACULTY
  STUDENT
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum SubjectType {
  LECTURE
  LAB
  ELECTIVE
}

enum RoomType {
  LECTURE_HALL
  LAB
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  faculty   Faculty?
  student   Student?

  @@map("users")
}

model Faculty {
  id               String   @id @default(cuid())
  userId           String   @unique
  department       String
  subjectsHandled  Subject[]
  availability     Json     // JSON: available days/slots
  leavesPerMonth   Int      @default(2)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timetableEntries TimetableEntry[]

  @@map("faculty")
}

model Student {
  id        String   @id @default(cuid())
  userId    String   @unique
  batchId   String
  rollNumber String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  batch     Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Subject {
  id           String      @id @default(cuid())
  name         String
  type         SubjectType
  weeklyHours  Int
  facultyId    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  faculty      Faculty     @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  timetableEntries TimetableEntry[]

  @@map("subjects")
}

model Classroom {
  id        String   @id @default(cuid())
  name      String   @unique
  capacity  Int
  type      RoomType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  timetableEntries TimetableEntry[]

  @@map("classrooms")
}

model Batch {
  id            String    @id @default(cuid())
  department    String
  semester      Int
  studentCount  Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  students      Student[]
  timetableEntries TimetableEntry[]

  @@unique([department, semester])
  @@map("batches")
}

model TimetableEntry {
  id         String     @id @default(cuid())
  batchId    String
  subjectId  String
  facultyId  String
  roomId     String
  day        DayOfWeek
  timeSlot   String     // e.g., "10:00-11:00"
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  batch      Batch      @relation(fields: [batchId], references: [id], onDelete: Cascade)
  subject    Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  faculty    Faculty    @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  room       Classroom  @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([batchId, day, timeSlot])
  @@unique([facultyId, day, timeSlot])
  @@unique([roomId, day, timeSlot])
  @@map("timetable_entries")
}

model TimetableSuggestion {
  id          String   @id @default(cuid())
  entryId     String
  suggestedBy String   // User ID
  changes     Json     // JSON object with suggested changes
  reason      String?
  status      String   @default("pending") // pending, approved, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("timetable_suggestions")
}

model TimetableVersion {
  id          String   @id @default(cuid())
  version     Int
  isActive    Boolean  @default(false)
  generatedBy String   // User ID
  createdAt   DateTime @default(now())

  @@map("timetable_versions")
}
